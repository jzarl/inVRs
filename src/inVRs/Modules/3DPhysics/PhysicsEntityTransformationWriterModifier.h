/*---------------------------------------------------------------------------*\
 *           interactive networked Virtual Reality system (inVRs)            *
 *                                                                           *
 *    Copyright (C) 2005-2009 by the Johannes Kepler University, Linz        *
 *                                                                           *
 *                            www.inVRs.org                                  *
 *                                                                           *
 *              contact: canthes@inVRs.org, rlander@inVRs.org                *
\*---------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
\*---------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

#ifndef _PHYSICSENTITYTRANSFORMATIONWRITERMODIFIER_H
#define _PHYSICSENTITYTRANSFORMATIONWRITERMODIFIER_H

#include <inVRs/SystemCore/TransformationManager/TransformationModifier.h>
#include <inVRs/SystemCore/TransformationManager/TransformationModifierFactory.h>

/** Modifier which sets the Entity-Transformation of a PhysicsEntity.
 * The class is a TransformationModifier which writes the input to the
 * PhysicsEntity which is managed by the Pipe the modifier hangs in. The
 * PhysicsEntity is determined by decoding the ID of the TransformationPipe.
 * The result is written to the PhysicsEntity::setEntityWorldTransformation-
 * method. The input of the Modifier is generated by the physics simulation.
 * The output is used to update the Entity Transformation in the virtual world.
 */
class PhysicsEntityTransformationWriterModifier : public TransformationModifier
{
public:

//*******************************************************//
// PUBLIC METHODS INHERITED FROM: TransformationModifier //
//*******************************************************//

	virtual TransformationData execute(TransformationData* resultLastStage, TransformationPipe* currentPipe);

}; // PhysicsEntityTransformationWriterModifier

/** Factory class for PhysicsEntityTransformationWriterModifier.
 * The class is used as a factory for the
 * PhysicsEntityTransformationWriterModifier.
 */
class PhysicsEntityTransformationWriterModifierFactory : public TransformationModifierFactory
{
public:

//*****************//
// PUBLIC METHODS: //
//*****************//

	PhysicsEntityTransformationWriterModifierFactory();

protected:

//*****************************************************************//
// PROTECTED METHODS inherited from: TransformationModifierFactory //
//*****************************************************************//

	virtual TransformationModifier* createInternal(ArgumentVector* args = NULL);
	virtual bool needSingleton();

}; // PhysicsEntityTransformationWriterModifierFactory

#endif // _PHYSICSENTITYTRANSFORMATIONWRITERMODIFIER_H
