/*---------------------------------------------------------------------------*\
 *           interactive networked Virtual Reality system (inVRs)            *
 *                                                                           *
 *    Copyright (C) 2005-2009 by the Johannes Kepler University, Linz        *
 *                                                                           *
 *                            www.inVRs.org                                  *
 *                                                                           *
 *              contact: canthes@inVRs.org, rlander@inVRs.org                *
\*---------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
\*---------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

#ifndef _TRANSLATIONMODELS_H
#define _TRANSLATIONMODELS_H

#include <gmtl/Quat.h>
#include <gmtl/Matrix.h>
#include <gmtl/Vec.h>

#include <irrXML.h>

#include "NavigationSharedLibraryExports.h"
#include <inVRs/InputInterface/ControllerInterface.h>
#include <inVRs/SystemCore/ClassFactory.h>
#include <inVRs/SystemCore/XMLTools.h>

#ifdef WIN32
#pragma warning( disable : 4507 )
#endif

using namespace irr;
using namespace io;

class INVRS_NAVIGATION_API TranslationModel {
public:
	virtual ~TranslationModel() {};
	virtual void getTranslation(ControllerInterface* controller, const gmtl::Quatf& rotationChange,
			gmtl::Vec3f& result, float dt)=0;
};

typedef ClassFactory<TranslationModel, ArgumentVector*> TranslationModelFactory;

/******************************************************************************
 * @class TranslationViewDirectionModel
 * the translation generated by this model is allways the viewing direction.
 * the result vector is of unit length
 */
class INVRS_NAVIGATION_API TranslationViewDirectionModel : public TranslationModel {
public:
	virtual void getTranslation(ControllerInterface* controller, const gmtl::Quatf& rotationChange,
			gmtl::Vec3f& result, float dt);
};

/******************************************************************************
 * @class TranslationSensorViewDirectionModel
 */
class INVRS_NAVIGATION_API TranslationSensorViewDirectionModel : public TranslationModel {
public:
	TranslationSensorViewDirectionModel(unsigned sensorIdx, bool ignoreYAxis);
	virtual void getTranslation(ControllerInterface* controller, const gmtl::Quatf& rotationChange,
			gmtl::Vec3f& result, float dt);

protected:
	unsigned sensorIdx;
	bool ignoreYAxis;
};

/******************************************************************************
 * @class TranslationViewDirectionButtonStrafeModel
 */
class INVRS_NAVIGATION_API TranslationViewDirectionButtonStrafeModel : public TranslationModel {
public:
	TranslationViewDirectionButtonStrafeModel(unsigned frontIdx, unsigned backIdx,
			unsigned leftIdx, unsigned rightIdx);
	virtual void getTranslation(ControllerInterface* controller, const gmtl::Quatf& rotationChange,
			gmtl::Vec3f& result, float dt);

protected:
	unsigned bttnIdx[4];
};

/******************************************************************************
 * @class TranslationViewDirectionAxisStrafeModel
 */
class INVRS_NAVIGATION_API TranslationViewDirectionAxisStrafeModel : public TranslationModel {
public:
	TranslationViewDirectionAxisStrafeModel(unsigned frontBackIdx, unsigned leftRightIdx);
	virtual void getTranslation(ControllerInterface* controller, const gmtl::Quatf& rotationChange,
			gmtl::Vec3f& result, float dt);

protected:
	unsigned axisIdx[2];
};

/******************************************************************************
 * @class DefaultTranslationModelFactory
 */
class DefaultTranslationModelFactory : public TranslationModelFactory {
protected:
	TranslationModel* createTranslationViewDirectionModel(ArgumentVector* args);
	TranslationModel* createTranslationSensorViewDirectionModel(ArgumentVector* args);
	TranslationModel* createTranslationViewDirectionButtonStrafeModel(ArgumentVector* args);
	TranslationModel* createTranslationViewDirectionAxisStrafeModel(ArgumentVector* args);

public:
	virtual ~DefaultTranslationModelFactory();
	virtual TranslationModel* create(std::string className, ArgumentVector* args = NULL);
}; // DefaultTranslationModelFactory

#endif // _TRANSLATIONMODELS_H
